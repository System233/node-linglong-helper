#!/bin/bash
# generated by ll-helper
# set -x

echo Applying Patch: icon

function ico_width() {
    od -j6 -An -N1 -tu1 --endian=little "$1" | xargs
}
function ico_height() {
    od -j7 -An -N1 -tu1 --endian=little "$1" | xargs
}
function png_width() {
    od -j16 -N4 -tu4 -An --endian=big "$1" | xargs
}
function png_height() {
    od -j20 -N4 -tu4 -An --endian=big "$1" | xargs
}
function jpeg_sof0_offset() {
    grep $(printf "%b" "\xFF\xC0") -aob "$1" | head -n1 | grep -oP "^\d+"
}
function jpeg_width() {
    offset=$(jpeg_sof0_offset "$1")
    od -An -j165 -N2 -tu2 --endian=big "$1" | xargs
}
function jpeg_height() {
    offset=$(jpeg_sof0_offset "$1")
    od -An -j163 -N2 -tu2 --endian=big "$1" | xargs
}
function gif_width() {
    od -An -j6 -N2 -tu2 --endian=little "$1" | xargs
}
function gif_height() {
    od -An -j8 -N2 -tu2 --endian=little "$1" | xargs
}
function bmp_width() {
    od -An -j18 -N4 -tu4 --endian=little "$1" | xargs
}
function bmp_height() {
    od -An -j22 -N4 -tu4 --endian=little "$1" | xargs
}
function unknown_image() {
    echo "Error: Unknown Image Format:${1}" >&2
    return 1
}
function unknown_width() {
    unknown_image "$1"
}
function unknown_height() {
    unknown_image "$1"
}
function image_format() {
    file=$1
    extension=$(echo "${file##*.}" | tr '[:upper:]' '[:lower:]')
    case "$extension" in
    jpg | jpeg)
        echo "jpeg"
        ;;
    png)
        echo "png"
        ;;
    gif)
        echo "gif"
        ;;
    bmp)
        echo "bmp"
        ;;
    ico)
        echo "ico"
        ;;
    svg)
        echo "svg"
        ;;
    *)
        echo "unknown"
        ;;
    esac
}
function image_width() {
    format=$(image_format "$1")
    ${format}_width "$1"
}

function image_height() {
    format=$(image_format "$1")
    ${format}_height "$1"
}
function setup_image() {
    image=$1
    size=$2
    name=$(basename $image)
    icon_dir=$PREFIX/share/icons/hicolor/${size}/apps
    icon_path="$icon_dir/$name"
    mkdir -p "$icon_dir"
    cp -af "$image" "$icon_path"
    echo "Copy $image => $icon_path"

}
function replace_image() {
    format=$(image_format "$1")
    if [ "$format" == "svg" ]; then
        setup_image $1 scalable
        return
    fi
    width=$(image_width "$1")
    if [[ $((width & (width - 1))) -eq 0 ]]; then
        setup_image "$1" "${width}x${width}"
        return
    fi
    size=16
    for i in {4..10}; do
        current=$((2 ** i))
        if [[ "$current" -le "$width" ]]; then
            size=$current
        else
            break
        fi
    done
    setup_image "$1" "${size}x${size}"
}
PATCH_APP_PATH="s#/opt/apps/\S+/files#${PREFIX}#g"
while read line; do
    ICON=$(grep -oP "(?:Icon=)\K.*" "$line" | head -n1)
    ICON_NAME=${ICON%.*}
    if [[ $ICON == /* ]]; then
        REBASE_ICON=$(echo $ICON | sed -E -e "$PATCH_APP_PATH")
        if [ -e "$REBASE_ICON" ]; then
            replace_image "$REBASE_ICON"
            ICON_NAME=$(basename "$ICON_NAME")
            sed -i -E -e "/Icon=/ s#$ICON#$ICON_NAME#g" $line
            echo "Replace Icon ${ICON} => ${ICON_NAME}"
        else
            echo "Warning: Rebased path for ${ICON} not found: ${REBASE_ICON}"
        fi
    else
        format=$(image_format "$ICON")
        if [ "$format" != "unknown" ]; then
            sed -i -E -e "/Icon=/ s#$ICON#$ICON_NAME#g" $line
            echo "Replace Icon ${ICON} => ${ICON_NAME}"
        fi
    fi
done <<<$(find $PREFIX/share/applications/ -name "*.desktop")
